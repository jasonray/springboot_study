defaults
  log global
  mode http
  option httplog
  timeout connect 10s
  timeout server 1m
  timeout client 1m
  # NOTE: 'log-format' overrides previous 'option httplog'
  #log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

global
  maxconn 3000
  log stdout format raw local0 info

frontend http
  log global
  bind *:8080
  timeout client 1m
  acl acl1 path_end -i app1/
  # NOTE: possibly a typo. turns out handy to be sure the path based acl does not fire
  acl acl2 path_beg -i app2
  acl acl3 url_dir app3
  acl acl4 req.hdr(x-application) -m found
  acl acl5 req.hdr(x-application) -i application
  http-request deny if { path  -i beg /admin }
  use_backend app1 if acl1
  use_backend app2 if acl2
  use_backend app3 if acl3
  use_backend app2 if acl4
  use_backend app3 if acl5
  # default_backend apps

backend apps
  balance roundrobin
  server app1 application-server1:8080 check
  server app2 application-server2:8080 check
  server app3 application-server3:8080 check
  # TODO:  additional application servers
backend app1
  # TODO:
  # option httpchck GET /app1/health.jsp
  # http-check expect status 200
  # NOTE: will pass context path to app
  server app application-server1:8080
backend app2
  server app application-server2:8080
backend app3
  server app application-server3:8080

#  parsing [/usr/local/etc/haproxy/haproxy.cfg:51] : 'listen' cannot handle unexpected argument '*:1936'.

frontend stats
  bind *:1936
  stats enable
  stats uri /
  stats refresh 10s
  stats admin if LOCALHOST
  stats auth admin:admin
