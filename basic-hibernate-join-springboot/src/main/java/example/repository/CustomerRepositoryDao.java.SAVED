package example.repository;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.logging.Level;

import org.hibernate.Hibernate;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.transform.AliasToEntityMapResultTransformer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Component;

import example.model.Customer;
import example.projection.CustomerItem;
import example.utils.HibernateUtility;

@Component
public class CustomerRepositoryDao implements CustomerRepository {

	private static Logger logger = LoggerFactory
			.getLogger(CustomerRepositoryDao.class);

	// NOTE: this method is using left join for illustration.
	// it does not work - see the comment in the interface
	// commenting the findCustomerDetailsByCustomerId does not help
	public List<CustomerItem> findAllCustomerItemsViaAnnotationQueryByCustomerId(
			int customerId) {
		List<CustomerItem> data = new ArrayList<>();

		SessionFactory factory = HibernateUtility.getSessionFactory();
		Session session = factory.openSession();
		// HQL
		@SuppressWarnings("unchecked")
		Query<CustomerItem> query = session.createQuery(
				"SELECT NEW example.projection.CustomerItem(c.customerName, a.city, i.itemName, i.price)"
						+ " from Customer c inner join c.items i join c.addresses a");
		logger.info("query string: " + query.getQueryString());
		List<CustomerItem> objectList = query.list();
		// NOTE: with "left join"
		// java.lang.IllegalArgumentException: org.hibernate.QueryException:
		// could not instantiate class [example.projection.CustomerItem] from tuple]
		// with
		// root cause
		// java.lang.IllegalArgumentException: null
		// "inner join" -
		logger.info(String.format("found: %d rows", objectList.size()));
		Iterator<CustomerItem> objectIterator = objectList.iterator();
		while (objectIterator.hasNext()) {
			Object row = (Object) objectIterator.next();

			CustomerItem result = new CustomerItem();
			logger.info(String.format("iterating row: %s", row.toString()));

			Class<?> targetClass = CustomerItem.class;
			Field[] targetFields = targetClass.getDeclaredFields();

			Class<?> sourceClass = row.getClass();
			Field[] sourceFields = sourceClass.getDeclaredFields();

			for (Field sourceField : sourceFields) {
				String sourceFieldName = sourceField.getName();
				logger.info("Processing result field: " + sourceFieldName);
				boolean sourceFieldFlag = sourceField.isAccessible();
				sourceField.setAccessible(true);

				try {
					Object value = sourceField.get(row);
					logger.info("Value: " + value);

					for (Field targetField : targetFields) {

						if (targetField.getName().equals(sourceFieldName)) {
							boolean flag = targetField.isAccessible();
							targetField.setAccessible(true);
							targetField.set(result, value);
							targetField.setAccessible(flag);
							break;
						}
					}

				} catch (IllegalArgumentException | IllegalAccessException e) {

					e.printStackTrace();
				}
				sourceField.setAccessible(sourceFieldFlag);
			}

			// java.lang.ClassCastException:
			// example.projection.CustomerItem cannot be cast to
			// example.projection.CustomerItem
			// something is wrong but it fails to explain what
			try {
				logger.info(String.format("details of row:%s %s %s %d",
						((CustomerItem) row).getCustomerName(),
						((CustomerItem) row).getCustomerCity(),
						((CustomerItem) row).getItemName(),
						((CustomerItem) row).getPrice()));
			} catch (java.lang.ClassCastException e) {
				// NOTE: logging exceptions as info to see them
				logger.info("Exception (ignored)" + e.toString());
			}
		}
		try {
			// repeat with typing
			objectList = query.list();
			objectIterator = objectList.iterator();
			while (objectIterator.hasNext()) {
				CustomerItem customerItem = (CustomerItem) objectIterator.next();
				data.add(customerItem);
			}
		} catch (java.lang.ClassCastException e) {
			// NOTE: logging exceptions as info to see them
			logger.info("Exception (ignored)" + e.toString());
		}
		session.clear();
		session.close();
		return (data);
	}

	// dummy methods required b interface - not implementing
	@Override
	public void deleteAllInBatch() {
	}

	@Override
	public void deleteInBatch(Iterable<Customer> arg0) {

	}

	@Override
	public List<Customer> findAll() {

		return null;
	}

	@Override
	public List<Customer> findAll(Sort arg0) {

		return null;
	}

	@Override
	public <S extends Customer> List<S> findAll(Example<S> arg0) {

		return null;
	}

	@Override
	public <S extends Customer> List<S> findAll(Example<S> arg0, Sort arg1) {

		return null;
	}

	@Override
	public List<Customer> findAllById(Iterable<Integer> arg0) {

		return null;
	}

	@Override
	public void flush() {

	}

	@Override
	public Customer getOne(Integer arg0) {

		return null;
	}

	@Override
	public <S extends Customer> List<S> saveAll(Iterable<S> arg0) {

		return null;
	}

	@Override
	public <S extends Customer> S saveAndFlush(S arg0) {

		return null;
	}

	@Override
	public Page<Customer> findAll(Pageable arg0) {

		return null;
	}

	@Override
	public long count() {

		return 0;
	}

	@Override
	public void delete(Customer arg0) {

	}

	@Override
	public void deleteAll() {

	}

	@Override
	public void deleteAll(Iterable<? extends Customer> arg0) {

	}

	@Override
	public void deleteById(Integer arg0) {

	}

	@Override
	public boolean existsById(Integer arg0) {

		return false;
	}

	@Override
	public Optional<Customer> findById(Integer arg0) {
		return null;
	}

	@Override
	public <S extends Customer> S save(S arg0) {
		return null;
	}

	@Override
	public <S extends Customer> long count(Example<S> arg0) {
		return 0;
	}

	@Override
	public <S extends Customer> boolean exists(Example<S> arg0) {
		return false;
	}

	@Override
	public <S extends Customer> Page<S> findAll(Example<S> arg0, Pageable arg1) {
		return null;
	}

	@Override
	public <S extends Customer> Optional<S> findOne(Example<S> arg0) {
		return null;
	}
}
