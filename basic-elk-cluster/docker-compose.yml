version: '2.2'

services:
  elasticsearch:
    restart: unless-stopped
    build: ./elasticsearch
    container_name: elasticsearch
    # volumes:
    #  - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
    #  - ./elasticsearch/data:/usr/share/elasticsearch/data
    environment:
      - TZ=Asia/Seoul
      # - ELASTIC_PASSWORD=elasticpassword
      - node.name=elasticsearch 
      - bootstrap.memory_lock=true
      - discovery.type=single-node 
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl http://localhost:9200 | grep -q 'You Know, for Search'",
        ]
      interval: 10s
      timeout: 10s
      retries: 60
        
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    networks:
      - elastic

  kibana:
    restart: unless-stopped
    build: ./kibana
    container_name: kibana
    # volumes:
    #  - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,z
    ports:
      - "5601:5601" 
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - elastic
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl http://localhost:5601/api/status | grep -q '401'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  logstash:
    restart: unless-stopped
    build: ./logstash
    container_name: logstash
    # volumes:
    #  - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,z
    #  - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,z
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - elastic

  apm-server:
    restart: unless-stopped
    build: ./apm-server
    container_name: apm-server
    cap_add: [ "CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID" ]
    cap_drop: [ "ALL" ]
    # volumes:
      # NOTE: the 'z' option tells Docker that two containers share the volume content. it is unclear why it is needed here
      # - ./apm-server/config/apm-server.yml:/usr/share/apm-server/apm-server.yml:ro,z
    ports:
      - "8200:8200"
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/
    # curl: (56) Recv failure: Connection reset by peer

    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    networks:
      - elastic
  app:
    restart: unless-stopped
    build: ./app
    container_name: app
    ports:
      - "6000:6000"
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:6000/
    depends_on:
      - apm-server
    networks:
      - elastic

networks:
  elastic:
